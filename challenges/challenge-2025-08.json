{
  "title": "Sudoku Solver",
  "description": "Problem Statement\n\nWrite a program to solve a Sudoku puzzle by filling the empty cells.\n\nA Sudoku solution must satisfy all of the following rules:\n1. Each of the digits '1'-'9' must occur exactly once in each row.\n2. Each of the digits '1'-'9' must occur exactly once in each column.\n3. Each of the digits '1'-'9' must occur exactly once in each of the nine 3x3 sub-boxes of the grid.\n\nInput Format\n\nThe Sudoku board is represented as a 9x9 2D array (an array of arrays).\n- Filled cells are represented by a character digit '1' through '9'.\n- Empty cells are represented by the '.' character.\n\nYour function should modify the board in-place to solve the puzzle. You can assume that any puzzle given will have one unique solution.",
  "testCases": [
    {
      "name": "Standard Sudoku Puzzle",
      "input": "[[\"5\", \"3\", \".\", \".\", \"7\", \".\", \".\", \".\", \".\"], [\"6\", \".\", \".\", \"1\", \"9\", \"5\", \".\", \".\", \".\"], [\".\", \"9\", \"8\", \".\", \".\", \".\", \".\", \"6\", \".\"], [\"8\", \".\", \".\", \".\", \"6\", \".\", \".\", \".\", \"3\"], [\"4\", \".\", \".\", \"8\", \".\", \"3\", \".\", \".\", \"1\"], [\"7\", \".\", \".\", \".\", \"2\", \".\", \".\", \".\", \"6\"], [\".\", \"6\", \".\", \".\", \".\", \".\", \"2\", \"8\", \".\"], [\".\", \".\", \".\", \"4\", \"1\", \"9\", \".\", \".\", \"5\"], [\".\", \".\", \".\", \".\", \"8\", \".\", \".\", \"7\", \"9\"]]",
      "expectedOutput": "[['5', '3', '4', '6', '7', '8', '9', '1', '2'], ['6', '7', '2', '1', '9', '5', '3', '4', '8'], ['1', '9', '8', '3', '4', '2', '5', '6', '7'], ['8', '5', '9', '7', '6', '1', '4', '2', '3'], ['4', '2', '6', '8', '5', '3', '7', '9', '1'], ['7', '1', '3', '9', '2', '4', '8', '5', '6'], ['9', '6', '1', '5', '3', '7', '2', '8', '4'], ['2', '8', '7', '4', '1', '9', '6', '3', '5'], ['3', '4', '5', '2', '8', '6', '1', '7', '9']]"
    },
    {
      "name": "Mostly Complete Puzzle",
      "input": "[[\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \".\"], [\"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"1\", \"2\", \"3\"], [\"7\", \"8\", \"9\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\"], [\"2\", \"1\", \"4\", \"3\", \"6\", \"5\", \"8\", \"9\", \"7\"], [\"3\", \"6\", \"5\", \"8\", \"9\", \"7\", \"2\", \"1\", \"4\"], [\"8\", \"9\", \"7\", \"2\", \"1\", \"4\", \"3\", \"6\", \"5\"], [\"5\", \"3\", \"1\", \"6\", \"4\", \"2\", \"9\", \"7\", \"8\"], [\"6\", \"4\", \"2\", \"9\", \"7\", \"8\", \"5\", \"3\", \"1\"], [\"9\", \"7\", \"8\", \"5\", \"3\", \"1\", \"6\", \"4\", \"2\"]]",
      "expectedOutput": "[['1', '2', '3', '4', '5', '6', '7', '8', '9'], ['4', '5', '6', '7', '8', '9', '1', '2', '3'], ['7', '8', '9', '1', '2', '3', '4', '5', '6'], ['2', '1', '4', '3', '6', '5', '8', '9', '7'], ['3', '6', '5', '8', '9', '7', '2', '1', '4'], ['8', '9', '7', '2', '1', '4', '3', '6', '5'], ['5', '3', '1', '6', '4', '2', '9', '7', '8'], ['6', '4', '2', '9', '7', '8', '5', '3', '1'], ['9', '7', '8', '5', '3', '1', '6', '4', '2']]"
    }
  ],
  "starterCode": {
    "python": "def solve_sudoku(board):\n    # Your backtracking algorithm here\n    # Modify the board in-place\n    pass",
    "java": "class Solution {\n    public void solveSudoku(char[][] board) {\n        // Your backtracking algorithm here\n        // Modify the board in-place\n    }\n}",
    "c++": "class Solution {\npublic:\n    void solveSudoku(vector<vector<char>>& board) {\n        // Your backtracking algorithm here\n        // Modify the board in-place\n    }\n};",
    "csharp": "public class Solution {\n    public void SolveSudoku(char[][] board) {\n        // Your backtracking algorithm here\n        // Modify the board in-place\n    }\n}",
    "sql": "-- Sudoku solver is not applicable in SQL"
  },
  "difficulty": "Hard",
  "timeLimit": 10,
  "memoryLimit": 256000,
  "createdAt": "2025-08-31T20:02:40.799301Z",
  "active": true
}